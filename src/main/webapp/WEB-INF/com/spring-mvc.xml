<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                        ">


	<!-- annotation-driven 会自动注册 DefaultAnnotationHandlerMapping AnnotationMethodHandlerAdapter 
		两个bean，这两个bean是spring MVC为@Controllers分发请求所必须的。并提供了数据绑定支持， @NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，读写XML的支持（JAXB），读写JSON的支持（Jackson）。 -->
	<!-- <mvc:annotation-driven /> -->

	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="com.fuli.web.common.JsonObjectMapper"></bean>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<!-- 对web包中的所有类进行扫描，以完成Bean创建和自动依赖注入的功能 -->
	<context:component-scan base-package="com.fuli.web">
		<!-- 不装载service ,其它都装载 -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<!-- 引入配置文件 <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"> 
		<property name="location" value="classpath:jdbc.properties" /> </bean> -->



	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->

	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter" /> <!-- JSON转换器 -->
			</list>
		</property>
	</bean>

	<!-- 定义跳转的文件的前后缀 ，视图模式配置 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个 可用的url地址 -->
		<property name="prefix" value="/jsp/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>

	<!-- 自定义拦截器 拦截器的执行是按配置的顺序来执行的 上一个返回true 时才会执行下一个拦截器 -->
	<mvc:interceptors>

		<!-- 接口请求拦截类 -->
		<bean class="com.fuli.web.common.interceptor.InterfaceInterceptor" />


		<!-- 全局请求拦截类 -->
		<!-- <mvc:interceptor> 需要拦截的规则 <mvc:mapping path="/**" /> <mvc:mapping 
			path="/*.jsp" /> <mvc:mapping path="/*.html" /> <mvc:mapping path="/*.htm" 
			/> 不需要拦截(放行)的规则 但是 web.xml 里已经配置了拦截 *.action 所以这里就不需要配置了 <mvc:exclude-mapping 
			path="/login.jsp"/> <mvc:exclude-mapping path="/register.jsp"/> <mvc:exclude-mapping 
			path="/about.jsp"/> <bean class="com.fuli.web.common.interceptor.MaomyInterceptor"></bean> 
			</mvc:interceptor> -->

	</mvc:interceptors>


	<!-- 全局异常拦截类 <bean class="com.fuli.web.common.exception.MaomyExceptionResolver" 
		/> -->
	<!-- 全局异常拦截类 -->
	<bean class="com.fuli.web.common.exception.WeIpHandlerExceptionResolver"
		p:order="1" />


</beans>  